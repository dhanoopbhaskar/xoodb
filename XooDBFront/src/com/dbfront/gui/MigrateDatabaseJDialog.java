/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MigrateDatabaseJDialog.java
 *
 * Created on Nov 23, 2010, 12:56:10 PM
 */
package com.dbfront.gui;

import com.dbfront.db.DatabaseConnection;
import com.dbfront.db.DatabaseInfo;
import com.dbfront.db.DatabaseManager;
import com.dbfront.db.FieldInfo;
import com.dbfront.db.MigrateDatabase;
import com.dbfront.db.TableInfo;
import com.xoodb.exception.XooDBSQLException;
import java.awt.Component;
import java.awt.Font;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 * 
 * @author dhanoopbhaskar
 */
public class MigrateDatabaseJDialog extends javax.swing.JDialog {

    private DatabaseConnection srcConn = null;
    private DatabaseManager srcDbMgr = null;
    private DatabaseConnection destConn = null;
    private DatabaseManager destDbMgr = null;
    public static boolean status;

    public MigrateDatabaseJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dbTypeComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        dbServerIpTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dbServrePortTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        dbNameTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        destDbTypeComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        destDbServerIpTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        destDbServerPortTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        destDbUsernameTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        destDbPasswordField = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();
        destDbNameTextField = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        previewTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableInfoTable = new javax.swing.JTable();
        closeButton = new javax.swing.JButton();
        previewButton = new javax.swing.JButton();
        migrateButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Database Migration");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Source Database"));

        jLabel1.setText("Select Database:");

        dbTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "XooDB", "Oracle", "MySQL", "MS SQL" }));
        dbTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Database Server:");

        dbServerIpTextField.setText("127.0.0.1");

        jLabel3.setText("Port:");

        dbServrePortTextField.setText("9999");

        jLabel4.setText("Username:");

        usernameTextField.setText("root");
        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Password:");

        passwordField.setText("root");

        jLabel6.setText("Database Name:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(dbNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(dbTypeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dbServerIpTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dbServrePortTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dbTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dbServerIpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(dbServrePortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dbNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Destination Database"));

        jLabel7.setText("Select Database:");

        destDbTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "XooDB", "Oracle", "MySQL", "MS SQL" }));

        jLabel8.setText("Database Server:");

        destDbServerIpTextField.setText("127.0.0.1");

        jLabel9.setText("Port:");

        jLabel10.setText("Username:");

        destDbUsernameTextField.setText("root");

        jLabel11.setText("Password:");

        jLabel12.setText("Database Name:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(destDbUsernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(destDbPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(destDbNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(destDbTypeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(destDbServerIpTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(destDbServerPortTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(destDbTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(destDbServerIpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(destDbServerPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(destDbUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(destDbPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(destDbNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Preview Source Database"));
        jSplitPane1.setDividerLocation(130);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        previewTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        previewTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                previewTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(previewTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        tableInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field Name", "Data Type", "Null", "Default"
            }
        ));
        tableInfoTable.setShowHorizontalLines(false);
        tableInfoTable.setShowVerticalLines(false);
        jScrollPane2.setViewportView(tableInfoTable);

        jSplitPane1.setRightComponent(jScrollPane2);

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/close.png"))); // NOI18N
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        previewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/db_pewview.png"))); // NOI18N
        previewButton.setText("Preview");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });

        migrateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/play_but.png"))); // NOI18N
        migrateButton.setText("Migrate Database");
        migrateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                migrateButtonActionPerformed(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/migratedb.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(closeButton)
                        .addGap(2, 2, 2)
                        .addComponent(previewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(migrateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(previewButton)
                    .addComponent(migrateButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        try {
            srcConn = connectToSrcDatabase();
            srcDbMgr = new DatabaseManager(srcConn);
            DatabaseInfo databaseInfo = srcDbMgr.getDatabaseInfo();
            loadPreviewTree(databaseInfo);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex, "Connect to Database", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Connect to Database", JOptionPane.ERROR_MESSAGE);
        } finally {
            if(srcConn != null && ! srcConn.getDbType().equals(DatabaseConnection.XOODB)) {
                try {
                    try {
                        srcConn.getConnection().close();
                        srcConn = null;
                    } catch (SQLException ex) {
                        Logger.getLogger(MigrateDatabaseJDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MigrateDatabaseJDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_previewButtonActionPerformed

    private void previewTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_previewTreeValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) previewTree.getLastSelectedPathComponent();
        if (selectedNode != null) {
            Object usrObj = selectedNode.getUserObject();
            if (usrObj instanceof TableInfo) {
                loadTableInfoTable((TableInfo) usrObj);
            }
        }
    }//GEN-LAST:event_previewTreeValueChanged

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void migrateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_migrateButtonActionPerformed
        String srcDbType = (String) dbTypeComboBox.getSelectedItem();
        String destDbType = (String) destDbTypeComboBox.getSelectedItem();

        

        if (srcDbType.equals(destDbType)) {
            JOptionPane.showMessageDialog(this,
                    "Source and destination databases are the same.",
                    "Migrate Database", JOptionPane.WARNING_MESSAGE);
            MigrateDatabaseJDialog.status = false;
            return;
        }
        
        try {
            if (srcConn == null) {
                srcConn = connectToSrcDatabase();
                srcDbMgr = new DatabaseManager(srcConn);
            }
            if (destConn == null) {
                destConn = connectToDestDatabase();
                destDbMgr = new DatabaseManager(destConn);
            }
            try {
                MigrateDatabaseJDialog.status = true;
                new MigrateDatabase(srcDbMgr, destDbMgr).migrate();                
            } catch (XooDBSQLException ex) {
                //System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "XooDBSQLException", JOptionPane.ERROR_MESSAGE);
                MigrateDatabaseJDialog.status = false;
                return;
            }
            
        } catch (ParserConfigurationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Migrate Database", JOptionPane.ERROR_MESSAGE);
            MigrateDatabaseJDialog.status = false;
            return;
        } catch (SAXException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Migrate Database", JOptionPane.ERROR_MESSAGE);
            destConn = null;
            srcConn = null;
            MigrateDatabaseJDialog.status = false;
            return;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Migrate Database", JOptionPane.ERROR_MESSAGE);
            destConn = null;
            srcConn = null;
            MigrateDatabaseJDialog.status = false;
            return;
        } catch (ClassNotFoundException ex) {
            destConn = null;
            srcConn = null;
            JOptionPane.showMessageDialog(this, ex, "Migrate Database", JOptionPane.ERROR_MESSAGE);
            MigrateDatabaseJDialog.status = false;
            return;
        } catch (SQLException ex) {
            destConn = null;
            srcConn = null;
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Migrate Database", JOptionPane.ERROR_MESSAGE);
            MigrateDatabaseJDialog.status = false;
            return;
        }

        Timer timer = new Timer();

        timer.schedule(new TimerTask() {

            @Override
            public void run() {
                System.out.println("");
                
                if(MigrateDatabaseJDialog.status && srcConn != null && destConn != null) {

                    if(MigrateDatabaseJDialog.status) {
                        JOptionPane.showMessageDialog(new JFrame(),
                        "Database Migration - executed", "Database Migration",
                        JOptionPane.INFORMATION_MESSAGE);
                    }
                    
                    if(srcConn != null && ! srcConn.getDbType().equals(DatabaseConnection.XOODB)) {
                        try {
                            try {
                                srcConn.getConnection().close();
                                srcConn = null;
                            } catch (SQLException ex) {
                                Logger.getLogger(MigrateDatabaseJDialog.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(MigrateDatabaseJDialog.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    if(destConn != null && ! destConn.getDbType().equals(DatabaseConnection.XOODB)) {
                        try {
                            try {
                                destConn.getConnection().close();
                                destConn = null;
                            } catch (SQLException ex) {
                                Logger.getLogger(MigrateDatabaseJDialog.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(MigrateDatabaseJDialog.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                }
            }
        }, 110);
        
    }//GEN-LAST:event_migrateButtonActionPerformed

    private void dbTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbTypeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbTypeComboBoxActionPerformed

    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MigrateDatabaseJDialog dialog = new MigrateDatabaseJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField dbNameTextField;
    private javax.swing.JTextField dbServerIpTextField;
    private javax.swing.JTextField dbServrePortTextField;
    private javax.swing.JComboBox dbTypeComboBox;
    private javax.swing.JTextField destDbNameTextField;
    private javax.swing.JPasswordField destDbPasswordField;
    private javax.swing.JTextField destDbServerIpTextField;
    private javax.swing.JTextField destDbServerPortTextField;
    private javax.swing.JComboBox destDbTypeComboBox;
    private javax.swing.JTextField destDbUsernameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton migrateButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton previewButton;
    private javax.swing.JTree previewTree;
    private javax.swing.JTable tableInfoTable;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

    private DatabaseConnection connectToSrcDatabase() {
        DatabaseConnection connection = new DatabaseConnection();
        String databaseType = (String) dbTypeComboBox.getSelectedItem();
        if (databaseType.equals(DatabaseConnection.XOODB)) {
            connection.setDbType(DatabaseConnection.XOODB);
        } else if (databaseType.equals(DatabaseConnection.MSSQL)) {
            connection.setDbType(DatabaseConnection.MSSQL);
        } else if (databaseType.equals(DatabaseConnection.MYSQL)) {
            connection.setDbType(DatabaseConnection.MYSQL);
        } else if (databaseType.equals(DatabaseConnection.ORACLE)) {
            connection.setDbType(DatabaseConnection.ORACLE);
        }
        connection.setDbServerIp(dbServerIpTextField.getText());
        connection.setDbPortNo(dbServrePortTextField.getText());
        connection.setDbUserName(usernameTextField.getText());
        connection.setDbPassword(new String(passwordField.getPassword()));
        connection.setDbName(dbNameTextField.getText());
        return connection;
    }

    private DatabaseConnection connectToDestDatabase() {
        DatabaseConnection connection = new DatabaseConnection();
        String databaseType = (String) destDbTypeComboBox.getSelectedItem();
        if (databaseType.equals(DatabaseConnection.XOODB)) {
            connection.setDbType(DatabaseConnection.XOODB);
        } else if (databaseType.equals(DatabaseConnection.MSSQL)) {
            connection.setDbType(DatabaseConnection.MSSQL);
        } else if (databaseType.equals(DatabaseConnection.MYSQL)) {
            connection.setDbType(DatabaseConnection.MYSQL);
        } else if (databaseType.equals(DatabaseConnection.ORACLE)) {
            connection.setDbType(DatabaseConnection.ORACLE);
        }
        connection.setDbServerIp(destDbServerIpTextField.getText());
        connection.setDbPortNo(destDbServerPortTextField.getText());
        connection.setDbUserName(destDbUsernameTextField.getText());
        connection.setDbPassword(new String(destDbPasswordField.getPassword()));
        connection.setDbName(destDbNameTextField.getText());
        return connection;
    }

    private void loadPreviewTree(DatabaseInfo databaseInfo) {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(databaseInfo.getDbName());
        Iterator keys = databaseInfo.getTables().keySet().iterator();
        while (keys.hasNext()) {
            TableInfo tableInfo = databaseInfo.getTables().get(keys.next());
            DefaultMutableTreeNode table = new DefaultMutableTreeNode(tableInfo);
            Iterator fields = tableInfo.getFields().keySet().iterator();
            while (fields.hasNext()) {
                FieldInfo fieldInfo = tableInfo.getFields().get(fields.next());
                DefaultMutableTreeNode field = new DefaultMutableTreeNode(fieldInfo);
                table.add(field);
            }
            root.add(table);
        }
        DefaultTreeModel treeModel = new DefaultTreeModel(root);
        previewTree.setModel(treeModel);
        previewTree.setCellRenderer(new PreviewTreeCellRenderer());
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                previewTree.updateUI();
            }
        });
    }

    private void loadTableInfoTable(TableInfo tableInfo) {
        DefaultTableModel tableModel = (DefaultTableModel) tableInfoTable.getModel();
        tableModel.getDataVector().removeAllElements();
        Iterator fields = tableInfo.getFields().keySet().iterator();
        while (fields.hasNext()) {
            FieldInfo fieldInfo = tableInfo.getFields().get(fields.next());
            Object[] row = new Object[]{fieldInfo.getFieldName(),
                (fieldInfo.getDataType() + " (" + fieldInfo.getSize() + ")"),
                (fieldInfo.isNullable() ? "Yes" : "No"),
                fieldInfo.getDefaultValue()};
            tableModel.addRow(row);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                tableInfoTable.updateUI();
            }
        });
    }

    class PreviewTreeCellRenderer extends DefaultTreeCellRenderer {

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value,
                boolean sel, boolean expanded, boolean leaf,
                int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
            Font font = UIManager.getFont("Tree.font");
            if (value instanceof DefaultMutableTreeNode) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
                Object usrObj = node.getUserObject();
                if (node.isRoot()) {
                    setIcon(new ImageIcon(this.getClass().getResource("/icon/db.png")));
                } else if (usrObj instanceof TableInfo) {
                    setText(((TableInfo) usrObj).getTableName());
                    setToolTipText(((TableInfo) usrObj).getTableName());
                    setIcon(new ImageIcon(this.getClass().getResource("/icon/table.png")));
                } else if (usrObj instanceof FieldInfo) {
                    setText(((FieldInfo) usrObj).getFieldName());
                    setToolTipText(((FieldInfo) usrObj).getFieldName());
                    setIcon(new ImageIcon(this.getClass().getResource("/icon/column.png")));
                }
            }
            return this;
        }
    }
}
