/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainJFrame.java
 *
 * Created on Nov 18, 2010, 7:58:54 AM
 */
package com.dbfront.gui;

import com.dbfront.conn.ConnectionManager;
import com.dbfront.conn.ResponseListener;
import com.dbfront.gui.mng.DatabaseTreeRenderer;
import com.dbfront.gui.mng.TableDataTableModel;
import com.dbfront.utilities.Utility;
import com.xoodb.beans.DatabaseBean;
import com.xoodb.beans.QueryBean;
import com.xoodb.beans.ResultBean;
import com.xoodb.beans.TableBean;
import com.xoodb.beans.TableColumnBean;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * 
 * @author dhanoopbhaskar
 */
public class MainJFrame extends javax.swing.JFrame implements ResponseListener,
        TableModelListener, ListSelectionListener {

    /** Creates new form MainJFrame */
    public static String userName = "";
    public static String selectedDatabase = null;
    public static ConnectionManager connectionManager = null;
    private boolean waitingForSave = false;
    private Utility utility = null;
    private String selectedTable = null;
    private boolean sqlEditor = false;

    public MainJFrame() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
            initComponents();
            setLocationRelativeTo(this);
            connectionManager = new ConnectionManager();
            utility = new Utility();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbTreePopupMenu = new javax.swing.JPopupMenu();
        refreshMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        newDbMenuItem = new javax.swing.JMenuItem();
        newtableMenuItem = new javax.swing.JMenuItem();
        fieldMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        removeMenuItem = new javax.swing.JMenuItem();
        editorPopupMenu = new javax.swing.JPopupMenu();
        clearEditorMenuItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        cutPopMenuItem = new javax.swing.JMenuItem();
        copyPopMenuItem = new javax.swing.JMenuItem();
        pastePopMenuItem = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        connectButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        addRowButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        executeButton = new javax.swing.JButton();
        selectedQueryExecuteButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        databaseTree = new javax.swing.JTree();
        jSplitPane2 = new javax.swing.JSplitPane();
        infoTabbedPane = new javax.swing.JTabbedPane();
        tableFieldPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        fieldSummaryTable = new javax.swing.JTable();
        tableContentPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        contentTable = new javax.swing.JTable();
        QueryEditorPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sqlEditorTextArea = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        sqlEditorResultTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        connectMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        databaseMenu = new javax.swing.JMenu();
        executeQueryMenuItem = new javax.swing.JMenuItem();
        executeSelectedMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        databseMenu = new javax.swing.JMenu("Database");
        newDatabaseMenuItem = new javax.swing.JMenuItem();
        removeDatabaseMenuItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        migrateMenuItem = new javax.swing.JMenuItem();
        tableMenu = new javax.swing.JMenu("Table");
        newTableMenuItem = new javax.swing.JMenuItem();
        removeTableMenuItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        addNewRowMenuItem = new javax.swing.JMenuItem();
        removeRowMenuItem = new javax.swing.JMenuItem();
        commitMenuItem = new javax.swing.JMenuItem();

        refreshMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/refreshIcon.png"))); // NOI18N
        refreshMenuItem.setText("Refresh");
        dbTreePopupMenu.add(refreshMenuItem);
        dbTreePopupMenu.add(jSeparator2);

        newDbMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/db.png"))); // NOI18N
        newDbMenuItem.setText("New Database...");
        newDbMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDbMenuItemActionPerformed(evt);
            }
        });
        dbTreePopupMenu.add(newDbMenuItem);

        newtableMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/table.png"))); // NOI18N
        newtableMenuItem.setText("New Table...");
        newtableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newtableMenuItemActionPerformed(evt);
            }
        });
        dbTreePopupMenu.add(newtableMenuItem);

        fieldMenuItem.setText("Field...");
        fieldMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldMenuItemActionPerformed(evt);
            }
        });
        dbTreePopupMenu.add(fieldMenuItem);
        dbTreePopupMenu.add(jSeparator3);

        removeMenuItem.setText("Remove");
        removeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMenuItemActionPerformed(evt);
            }
        });
        dbTreePopupMenu.add(removeMenuItem);

        clearEditorMenuItem.setText("Clear");
        clearEditorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEditorMenuItemActionPerformed(evt);
            }
        });
        editorPopupMenu.add(clearEditorMenuItem);
        editorPopupMenu.add(jSeparator6);

        cutPopMenuItem.setText("Cut");
        cutPopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutPopMenuItemActionPerformed(evt);
            }
        });
        editorPopupMenu.add(cutPopMenuItem);

        copyPopMenuItem.setText("Copy");
        copyPopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyPopMenuItemActionPerformed(evt);
            }
        });
        editorPopupMenu.add(copyPopMenuItem);

        pastePopMenuItem.setText("Paste");
        pastePopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastePopMenuItemActionPerformed(evt);
            }
        });
        editorPopupMenu.add(pastePopMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XooDB");

        jToolBar1.setRollover(true);

        connectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Connect.png"))); // NOI18N
        connectButton.setFocusable(false);
        connectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(connectButton);
        jToolBar1.add(jSeparator4);

        addRowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addRow.png"))); // NOI18N
        addRowButton.setToolTipText("Add Row");
        addRowButton.setEnabled(false);
        addRowButton.setFocusable(false);
        addRowButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addRowButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addRowButton);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/removeRow.png"))); // NOI18N
        removeButton.setToolTipText("Remove Row");
        removeButton.setEnabled(false);
        removeButton.setFocusable(false);
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removeButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/saveRow.png"))); // NOI18N
        saveButton.setToolTipText("Save");
        saveButton.setEnabled(false);
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);
        jToolBar1.add(jSeparator5);

        executeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/play.png"))); // NOI18N
        executeButton.setToolTipText("Exceute Query");
        executeButton.setFocusable(false);
        executeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        executeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(executeButton);

        selectedQueryExecuteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/playselected.png"))); // NOI18N
        selectedQueryExecuteButton.setFocusable(false);
        selectedQueryExecuteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectedQueryExecuteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectedQueryExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedQueryExecuteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(selectedQueryExecuteButton);

        jSplitPane1.setDividerLocation(150);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        databaseTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        databaseTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                databaseTreeMouseClicked(evt);
            }
        });
        databaseTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                databaseTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(databaseTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jSplitPane2.setDividerLocation(350);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        infoTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                infoTabbedPaneStateChanged(evt);
            }
        });

        fieldSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Column Name", "Type", "Size", "Null", "Primary Key"
            }
        ));
        fieldSummaryTable.setShowHorizontalLines(false);
        fieldSummaryTable.setShowVerticalLines(false);
        jScrollPane4.setViewportView(fieldSummaryTable);
        fieldSummaryTable.getColumnModel().getColumn(1).setMinWidth(150);
        fieldSummaryTable.getColumnModel().getColumn(1).setPreferredWidth(150);
        fieldSummaryTable.getColumnModel().getColumn(1).setMaxWidth(150);
        fieldSummaryTable.getColumnModel().getColumn(2).setMinWidth(100);
        fieldSummaryTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        fieldSummaryTable.getColumnModel().getColumn(2).setMaxWidth(100);
        fieldSummaryTable.getColumnModel().getColumn(3).setMinWidth(100);
        fieldSummaryTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        fieldSummaryTable.getColumnModel().getColumn(3).setMaxWidth(100);
        fieldSummaryTable.getColumnModel().getColumn(4).setMinWidth(100);
        fieldSummaryTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        fieldSummaryTable.getColumnModel().getColumn(4).setMaxWidth(100);

        javax.swing.GroupLayout tableFieldPanelLayout = new javax.swing.GroupLayout(tableFieldPanel);
        tableFieldPanel.setLayout(tableFieldPanelLayout);
        tableFieldPanelLayout.setHorizontalGroup(
            tableFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
        );
        tableFieldPanelLayout.setVerticalGroup(
            tableFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
        );

        infoTabbedPane.addTab("Field Summary", tableFieldPanel);

        contentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(contentTable);

        javax.swing.GroupLayout tableContentPanelLayout = new javax.swing.GroupLayout(tableContentPanel);
        tableContentPanel.setLayout(tableContentPanelLayout);
        tableContentPanelLayout.setHorizontalGroup(
            tableContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
        );
        tableContentPanelLayout.setVerticalGroup(
            tableContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
        );

        infoTabbedPane.addTab("Table Data", tableContentPanel);

        sqlEditorTextArea.setColumns(20);
        sqlEditorTextArea.setRows(5);
        sqlEditorTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sqlEditorTextAreaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(sqlEditorTextArea);

        javax.swing.GroupLayout QueryEditorPanelLayout = new javax.swing.GroupLayout(QueryEditorPanel);
        QueryEditorPanel.setLayout(QueryEditorPanelLayout);
        QueryEditorPanelLayout.setHorizontalGroup(
            QueryEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
        );
        QueryEditorPanelLayout.setVerticalGroup(
            QueryEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
        );

        infoTabbedPane.addTab("SQL Editor", QueryEditorPanel);

        jSplitPane2.setTopComponent(infoTabbedPane);

        sqlEditorResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(sqlEditorResultTable);

        jSplitPane2.setRightComponent(jScrollPane5);

        jSplitPane1.setRightComponent(jSplitPane2);

        fileMenu.setText("File");

        connectMenuItem.setText("Connect");
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuItemActionPerformed1(evt);
            }
        });
        fileMenu.add(connectMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        jMenuBar1.add(editMenu);

        databaseMenu.setText("Database");

        executeQueryMenuItem.setText("Execute Query");
        executeQueryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeQueryMenuItemActionPerformed(evt);
            }
        });
        databaseMenu.add(executeQueryMenuItem);

        executeSelectedMenuItem.setText("Execute Selected Query");
        databaseMenu.add(executeSelectedMenuItem);
        databaseMenu.add(jSeparator7);

        newDatabaseMenuItem.setText("New Database");
        newDatabaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDatabaseMenuItemActionPerformed(evt);
            }
        });
        databseMenu.add(newDatabaseMenuItem);

        removeDatabaseMenuItem.setText("Remove Database");
        removeDatabaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDatabaseMenuItemActionPerformed(evt);
            }
        });
        databseMenu.add(removeDatabaseMenuItem);
        databseMenu.add(jSeparator9);

        migrateMenuItem.setText("Migrate Database");
        migrateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                migrateMenuItemActionPerformed(evt);
            }
        });
        databseMenu.add(migrateMenuItem);

        databaseMenu.add(databseMenu);

        newTableMenuItem.setText("New Table");
        newTableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTableMenuItemActionPerformed(evt);
            }
        });
        tableMenu.add(newTableMenuItem);

        removeTableMenuItem.setText("Remove Table");
        tableMenu.add(removeTableMenuItem);
        tableMenu.add(jSeparator8);

        addNewRowMenuItem.setText("Add New Row");
        addNewRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewRowMenuItemActionPerformed(evt);
            }
        });
        tableMenu.add(addNewRowMenuItem);

        removeRowMenuItem.setText("Remove Row");
        tableMenu.add(removeRowMenuItem);

        commitMenuItem.setText("Commit");
        tableMenu.add(commitMenuItem);

        databaseMenu.add(tableMenu);

        jMenuBar1.add(databaseMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed
        ConnectJDialog connectJDialog = new ConnectJDialog(this, true);
        connectJDialog.setLocationRelativeTo(this);
        connectJDialog.setVisible(true);
    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void fieldMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldMenuItemActionPerformed

    private void databaseTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_databaseTreeMouseClicked
        /**
         * BUTTON3 -> right click
         */
        if (evt.getButton() == MouseEvent.BUTTON3) {
            dbTreePopupMenu.show(databaseTree, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_databaseTreeMouseClicked

    /**
     * adding new database
     *
     * @param evt
     */
    private void newDbMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDbMenuItemActionPerformed
       String dbName = JOptionPane.showInputDialog(this, "Database Name:",
                "Create Database", JOptionPane.QUESTION_MESSAGE);
        if (dbName != null && !dbName.equals("")) {
            connectionManager.setResponseListener(this);
            connectionManager.writeToServer("CREATE DATABASE " + dbName);
        }
    }//GEN-LAST:event_newDbMenuItemActionPerformed

    /**
     * adding a table
     *
     * @param evt
     */
    private void newtableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newtableMenuItemActionPerformed
        /**
         * if a database is already selected
         *
         * display CreateTableDialog
         */
        if (selectedDatabase != null) {
            CreateTableJDialog createTableJDialog = new CreateTableJDialog(this, true);
            createTableJDialog.setLocationRelativeTo(this);
            createTableJDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please select a database first for creating a table",
                    "Create Table", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_newtableMenuItemActionPerformed

    /**
     * handles the databaseTree
     * 
     * @param evt
     */
    private void databaseTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_databaseTreeValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)
                databaseTree.getLastSelectedPathComponent();
        /**
         * each node in the tree contains a user object.
         * using the method getUserObject() we get the object from the
         * selectedNode
         *
         * check the type of user object
         * if its DatabaseBean
         * -it represents a database and get the databaseName
         * if its TableBean
         * -it represents a table and get the tableName
         * -get the database in which the table is contained
         *      (database is the parent node of the table)
         */
        if (selectedNode != null) {
            Object userObj = selectedNode.getUserObject();
            if (userObj instanceof DatabaseBean) {
                selectedDatabase = ((DatabaseBean) userObj).getDatabaseName();
            } else if (userObj instanceof TableBean) {
                TableBean tableBean = (TableBean) userObj;
                loadFieldDetails(tableBean.getColumns());
                loadTableData(tableBean.getColumns());
                selectedTable = tableBean.getTableName();
                selectedDatabase =
                        ((DatabaseBean) ((DefaultMutableTreeNode) selectedNode.getParent()).getUserObject()).getDatabaseName();
                QueryBean query = new QueryBean();
                query.setDatabaseName(selectedDatabase);
                query.setQuery("SELECT * FROM " + selectedTable);
                query.setQueryType("SELECT");
                connectionManager.setResponseListener(this);
                connectionManager.writeToServer(query);
            } else {
                selectedDatabase = null;
            }
        } else {
            selectedDatabase = null;
        }
        changeStateOfAddRow();
    }//GEN-LAST:event_databaseTreeValueChanged

    /**
     * to add a new row
     * 
     * @param evt
     */
    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
        /**
         * if the component selected in the tabbed pane is tableContentPanel
         */
        if (infoTabbedPane.getSelectedComponent() == tableContentPanel) {
            /**
             * get the table model of the contentTable
             *
             * add a new row using the method addRow()
             */
            DefaultTableModel tableModel = (DefaultTableModel) contentTable.getModel();
            /**
             * in addRow() allocate space by passing an array of Object of size
             * equal to the no of columns in the data table
             */
            tableModel.addRow(new Object[tableModel.getColumnCount()]);
            waitingForSave = true;
        }
        changeStateOfAddRow();
    }//GEN-LAST:event_addRowButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (infoTabbedPane.getSelectedComponent() == tableContentPanel) {
            int selectedRow = contentTable.getSelectedRow();
            if (selectedRow != -1) {
                QueryBean query = new QueryBean();
                query.setDatabaseName(selectedDatabase);
                /**
                 * queryType is used by the class HandleClientRequest in the XooDB
                 * server
                 */
                query.setQueryType("DELETE ROW");
                query.setTableName(selectedTable);
                query.setSelectedRow(selectedRow);
                connectionManager.setResponseListener(this);
                connectionManager.writeToServer(query);
//                DefaultTableModel tableModel = (DefaultTableModel) contentTable.getModel();
//                tableModel.removeRow(selectedRow);
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * connect to the XooDB server when the button is pressed
     * @param evt
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        ConnectJDialog connectJDialog = new ConnectJDialog(this, true);
        connectJDialog.setLocationRelativeTo(this);
        connectJDialog.setVisible(true);
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * connect to the XooDB server when connect option in menu is selected
     * @param evt
     */
    private void connectMenuItemActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed1
        ConnectJDialog connectJDialog = new ConnectJDialog(this, true);
        connectJDialog.setLocationRelativeTo(this);
        connectJDialog.setVisible(true);
    }//GEN-LAST:event_connectMenuItemActionPerformed1

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * invoked when the state of the tabbed pane is changed
     * @param evt
     */
    private void infoTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_infoTabbedPaneStateChanged
        changeStateOfAddRow();
    }//GEN-LAST:event_infoTabbedPaneStateChanged

    /**
     * when the save button is pressed
     * @param evt
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        /**
         * contentTable -> Table Data
         */
        if (contentTable.getRowCount() != 0) {
            DefaultTableModel tableModel = (DefaultTableModel) contentTable.getModel();
            Vector rowData = (Vector) tableModel.getDataVector().get(
                    contentTable.getRowCount() - 1);
            /**
             * INSERT statement corresponding to the row added is created
             * using
             * createInsertTableStatement(Vector rowData, String tableName)
             * in Utility.java
             */
            String stmnt = utility.createInsertTableStatement(rowData, selectedTable);
            if (stmnt != null && selectedDatabase != null) {
                /**
                 * construct the query in QueryBean
                 */
                QueryBean query = new QueryBean();
                query.setQuery(stmnt);
                query.setDatabaseName(selectedDatabase);
                /**
                 * send the QueryBean to the server
                 */
                connectionManager.setResponseListener(this);
                connectionManager.writeToServer(query);
            } else {
                JOptionPane.showMessageDialog(this, "Please select Database.",
                        "Insert Row", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * 
     * @param evt
     */
    private void removeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMenuItemActionPerformed
        /**
         * get the selected node from the tree
         */
        DefaultMutableTreeNode selectedNode =
                (DefaultMutableTreeNode) databaseTree.getLastSelectedPathComponent();

        if (selectedNode != null) {
            /**
             * get the object corresponding to the selected node
             */
            Object usrObj = selectedNode.getUserObject();
            if (usrObj instanceof DatabaseBean) {
                /**
                 * if the object is an instance of DatabaseBean
                 * -confirm the selection
                 * -create QueryBean - DROP DATABASE databaseName
                 * -send to the XooDB server
                 */
                if ((JOptionPane.showConfirmDialog(this,
                        "Do you want to remove database: " + selectedDatabase + " ?",
                        "Remove Database", JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION) {
                    QueryBean query = new QueryBean();
                    query.setDatabaseName(selectedDatabase);
                    query.setQuery("DROP DATABASE " + selectedDatabase);
                    connectionManager.setResponseListener(this);
                    connectionManager.writeToServer(query);
                }
            } else if (usrObj instanceof TableBean) {
                /**
                 * if the object is an instance of TableBean
                 * -confirm selection
                 * -create QueryBean - DROP TABLE tableName
                 * -send to XooDB server
                 */
                if ((JOptionPane.showConfirmDialog(this,
                        "Do you want remove table: " + selectedTable + " ?",
                        "Remove Table", JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION) {
                    QueryBean query = new QueryBean();
                    query.setDatabaseName(selectedDatabase);
                    query.setQuery("DROP TABLE " + selectedTable);
                    connectionManager.setResponseListener(this);
                    connectionManager.writeToServer(query);
                }
            }
        }
    }//GEN-LAST:event_removeMenuItemActionPerformed

    private void sqlEditorTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sqlEditorTextAreaMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            editorPopupMenu.show(sqlEditorTextArea, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_sqlEditorTextAreaMouseClicked

    /**
     * 
     * @param evt
     */
    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        /**
         * get the text from the sqlEditorTextArea
         */
        String queryStr = sqlEditorTextArea.getText();
        if (!queryStr.equals("")) {
            QueryBean query = new QueryBean();
            query.setDatabaseName(selectedDatabase);
            if (queryStr.toLowerCase().startsWith("select")) {
                query.setQueryType("SELECT");
            }
            query.setQuery(queryStr);
            connectionManager.setResponseListener(this);
            connectionManager.writeToServer(query);
            sqlEditor = true;
        }
    }//GEN-LAST:event_executeButtonActionPerformed

    /**
     * 
     * @param evt
     */
    private void selectedQueryExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedQueryExecuteButtonActionPerformed
        /**
         * get the selected text from the sqlEditorTextArea
         */
        String queryStr = sqlEditorTextArea.getSelectedText();
        if (queryStr != null && !queryStr.equals("")) {
            QueryBean query = new QueryBean();
            query.setDatabaseName(selectedDatabase);
            if (queryStr.toLowerCase().startsWith("select")) {
                query.setQueryType("SELECT");
            }
            query.setQuery(queryStr);
            connectionManager.setResponseListener(this);
            connectionManager.writeToServer(query);
            sqlEditor = true;
        }
    }//GEN-LAST:event_selectedQueryExecuteButtonActionPerformed

    private void clearEditorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEditorMenuItemActionPerformed
        sqlEditorTextArea.setText("");
    }//GEN-LAST:event_clearEditorMenuItemActionPerformed

    private void cutPopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutPopMenuItemActionPerformed
        sqlEditorTextArea.cut();
    }//GEN-LAST:event_cutPopMenuItemActionPerformed

    private void copyPopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyPopMenuItemActionPerformed
        sqlEditorTextArea.copy();
    }//GEN-LAST:event_copyPopMenuItemActionPerformed

    private void pastePopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastePopMenuItemActionPerformed
        sqlEditorTextArea.paste();
    }//GEN-LAST:event_pastePopMenuItemActionPerformed

    private void migrateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_migrateMenuItemActionPerformed
        /**
         * database migration
         */
        MigrateDatabaseJDialog migrateDatabaseJDialog = new MigrateDatabaseJDialog(this, true);
        migrateDatabaseJDialog.setLocationRelativeTo(this);
        migrateDatabaseJDialog.setVisible(true);
    }//GEN-LAST:event_migrateMenuItemActionPerformed

    /**
     * adding new table
     *
     * @param evt
     */
    private void newTableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTableMenuItemActionPerformed
        if (selectedDatabase != null) {
            CreateTableJDialog createTableJDialog = new CreateTableJDialog(this, true);
            createTableJDialog.setLocationRelativeTo(this);
            createTableJDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please select the database for create table",
                    "Create Table", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_newTableMenuItemActionPerformed

    /**
     * adding new database
     *
     * @param evt
     */
    private void newDatabaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDatabaseMenuItemActionPerformed
        String dbName = JOptionPane.showInputDialog(this, "Database Name:",
                "Create Database", JOptionPane.QUESTION_MESSAGE);
        if (dbName != null && !dbName.equals("")) {
            connectionManager.setResponseListener(this);
            connectionManager.writeToServer("CREATE DATABASE " + dbName);
        }
    }//GEN-LAST:event_newDatabaseMenuItemActionPerformed

    private void executeQueryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_executeQueryMenuItemActionPerformed

    private void removeDatabaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDatabaseMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeDatabaseMenuItemActionPerformed

    private void addNewRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewRowMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addNewRowMenuItemActionPerformed
    /**
     * @param args the command line arguments
     */
    /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainJFrame().setVisible(true);


            }
        });


    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel QueryEditorPanel;
    private javax.swing.JMenuItem addNewRowMenuItem;
    private javax.swing.JButton addRowButton;
    private javax.swing.JMenuItem clearEditorMenuItem;
    private javax.swing.JMenuItem commitMenuItem;
    private javax.swing.JButton connectButton;
    private javax.swing.JMenuItem connectMenuItem;
    private javax.swing.JTable contentTable;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem copyPopMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem cutPopMenuItem;
    private javax.swing.JMenu databaseMenu;
    private javax.swing.JTree databaseTree;
    private javax.swing.JMenu databseMenu;
    private javax.swing.JPopupMenu dbTreePopupMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JPopupMenu editorPopupMenu;
    private javax.swing.JButton executeButton;
    private javax.swing.JMenuItem executeQueryMenuItem;
    private javax.swing.JMenuItem executeSelectedMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem fieldMenuItem;
    private javax.swing.JTable fieldSummaryTable;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTabbedPane infoTabbedPane;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem migrateMenuItem;
    private javax.swing.JMenuItem newDatabaseMenuItem;
    private javax.swing.JMenuItem newDbMenuItem;
    private javax.swing.JMenuItem newTableMenuItem;
    private javax.swing.JMenuItem newtableMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem pastePopMenuItem;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JButton removeButton;
    private javax.swing.JMenuItem removeDatabaseMenuItem;
    private javax.swing.JMenuItem removeMenuItem;
    private javax.swing.JMenuItem removeRowMenuItem;
    private javax.swing.JMenuItem removeTableMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton selectedQueryExecuteButton;
    private javax.swing.JTable sqlEditorResultTable;
    private javax.swing.JTextArea sqlEditorTextArea;
    private javax.swing.JPanel tableContentPanel;
    private javax.swing.JPanel tableFieldPanel;
    private javax.swing.JMenu tableMenu;
    // End of variables declaration//GEN-END:variables

    private void changeStateOfAddRow() {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) databaseTree.getLastSelectedPathComponent();
        if (waitingForSave) {
            addRowButton.setEnabled(false);
            saveButton.setEnabled(true);
        } else if (selectedNode != null) {
            Object userObj = selectedNode.getUserObject();
            if (infoTabbedPane.getSelectedComponent() == tableContentPanel
                    && userObj instanceof TableBean && !waitingForSave) {
                addRowButton.setEnabled(true);
                saveButton.setEnabled(false);
            } else {
                addRowButton.setEnabled(false);
            }
        } else {
            addRowButton.setEnabled(false);
        }
    }

    /**
     * for reloading the user, databases and tables, etc on the database tree
     *
     * @param databases
     */
    public void reloadDatabaseTree(ArrayList databases) {
        /**
         * root of the tree is userName
         */
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(userName);
        /**
         * traverse each database owned by the user with userName
         * -add columns to each table in the database
         * -add tables to each database
         * -add the databases to the root i.e the userName
         */
        for (int i = 0; i < databases.size(); i++) {
            DatabaseBean databaseBean = (DatabaseBean) databases.get(i);
            DefaultMutableTreeNode databaseNode = new DefaultMutableTreeNode(databaseBean);
            ArrayList tables = databaseBean.getTables();
            for (int j = 0; j < tables.size(); j++) {
                TableBean tableBean = (TableBean) tables.get(j);
                DefaultMutableTreeNode tableNode = new DefaultMutableTreeNode(tableBean);
                for (TableColumnBean columnBean : tableBean.getColumns()) {
                    /**
                     * from the TableColumnBean retrieve the columnName
                     * create a node for that
                     * add the columnNode to the tableNode
                     */
                    DefaultMutableTreeNode columnNode = new DefaultMutableTreeNode(columnBean.getColumnName());
                    tableNode.add(columnNode);
                }
                databaseNode.add(tableNode);
            }
            rootNode.add(databaseNode);
        }
        databaseTree.setModel(new DefaultTreeModel(rootNode));
        databaseTree.setCellRenderer(new DatabaseTreeRenderer());

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                /**
                 * update the user interface
                 */
                databaseTree.updateUI();
            }
        });
    }

    /**
     * 
     * @param data
     * @param columnNames
     */
    public void viewSQLEditor(String[][] data, String[] columnNames) {
        DefaultTableModel tableModel = new DefaultTableModel(data, columnNames);
        sqlEditorResultTable.setModel(tableModel);
    }
    
    public void response(Object response) {
        if (response instanceof String) {
            JOptionPane.showMessageDialog(this, response, "Login", JOptionPane.WARNING_MESSAGE);
        } else if (response instanceof ResultBean) {
            ResultBean resultBean = (ResultBean) response;
            if (sqlEditor) {
                if (resultBean.getType().equals("TABLE")) {
                    viewSQLEditor(resultBean.getTableData(), resultBean.getTableColumnNames());
                } else {
                    ArrayList data = ((ResultBean) response).getData();
                    reloadDatabaseTree(data);
                }
            } else if (resultBean.getType().equals("TABLE")) {
                loadTableData(resultBean.getTableData(), resultBean.getTableColumnNames());
            } else {
                ArrayList data = ((ResultBean) response).getData();
                reloadDatabaseTree(data);
                waitingForSave = false;
                saveButton.setEnabled(false);
            }
        }
        sqlEditor = false;
    }

    private void loadFieldDetails(TableColumnBean[] columns) {
        DefaultTableModel tableModel = (DefaultTableModel) fieldSummaryTable.getModel();
        tableModel.getDataVector().removeAllElements();
        // Iterator<TableColumnBean> values = (Iterator<TableColumnBean>) columns.values().iterator();
        //while (values.hasNext()) {
        for (int i = 0; i < columns.length; i++) {
            //TableColumnBean tableColumnBean = values.next();
            TableColumnBean tableColumnBean = columns[i];
            tableModel.addRow(new Object[]{tableColumnBean.getColumnName(),
                        tableColumnBean.getDataType(), tableColumnBean.getSize(),
                        tableColumnBean.isNullAllowed(), tableColumnBean.isPrivateKey()});
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                fieldSummaryTable.updateUI();
            }
        });
    }

    private void loadTableData(TableColumnBean[] columns) {
        TableDataTableModel tableModel = new TableDataTableModel(utility.getColumnNames(columns));
        tableModel.addTableModelListener(this);
        contentTable.setModel(tableModel);
        contentTable.getSelectionModel().addListSelectionListener(this);
        changeStateOfAddRow();

    }

    private void loadTableData(String[][] data, String[] tableColumnNames) {
        TableDataTableModel tableModel = new TableDataTableModel(data, tableColumnNames);
        tableModel.addTableModelListener(this);
        contentTable.setModel(tableModel);
        contentTable.getSelectionModel().addListSelectionListener(this);
        changeStateOfAddRow();
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                contentTable.updateUI();
            }
        });
    }

    public void tableChanged(TableModelEvent e) {
        if (e.getType() == TableModelEvent.UPDATE && !waitingForSave) {
            System.out.println(e.getLastRow() + " : " + e.getColumn() + "Updated");
            String newData = (String) contentTable.getValueAt(e.getLastRow(), e.getColumn());
            String fieldName = contentTable.getColumnName(e.getColumn());
            QueryBean query = new QueryBean();
            query.setDatabaseName(selectedDatabase);
            query.setTableName(selectedTable);
            query.setQueryType("UPDATE CELL");
            query.setSelectedRow(e.getFirstRow());
            query.setSelectedColumn(e.getColumn());
            query.setFieldName(fieldName);
            query.setCellData(newData);

            connectionManager.setResponseListener(this);
            connectionManager.writeToServer(query);
        }
    }

    public void valueChanged(ListSelectionEvent e) {
        int selectedIndext = contentTable.getSelectedRow();
        if (selectedIndext != -1 && !waitingForSave) {
            removeButton.setEnabled(true);
        } else {
            removeButton.setEnabled(false);
        }
    }
}
