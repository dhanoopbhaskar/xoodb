/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * XooDBFrontMainFrame.java
 *
 * Created on Jan 26, 2011, 9:45:53 PM
 */
package com.dbfront.gui;

import com.dbfront.about.AboutFrame;
import com.dbfront.about.ContactFrame;
import com.dbfront.about.HelpFrame;
import com.dbfront.conn.ConnectionManager;
import com.dbfront.conn.ResponseListener;
import com.dbfront.gui.mng.DatabaseTreeRenderer;
import com.dbfront.gui.mng.TableDataTableModel;
import com.dbfront.utilities.Utility;
import com.xoodb.beans.DatabaseBean;
import com.xoodb.beans.QueryBean;
import com.xoodb.beans.ResultBean;
import com.xoodb.beans.TableBean;
import com.xoodb.beans.TableColumnBean;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author dhanoopbhaskar
 */
public class XooDBFrontMainFrame extends javax.swing.JFrame implements 
        ResponseListener, TableModelListener, ListSelectionListener {

    public static String userName = "";
    public static String selectedDatabase = null;
    public static ConnectionManager connectionManager = null;
    private boolean waitingForSave = false;
    private Utility utility = null;
    private String selectedTable = null;
    private boolean sqlEditor = false;

    /** Creates new form XooDBFrontMainFrame */
    public XooDBFrontMainFrame() {
        try {
            String osName = System.getProperty("os.name");
            if(osName.contains("Windows")) {
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");                
            } else if(osName.contains("Linux")) {
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(XooDBFrontMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(XooDBFrontMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(XooDBFrontMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(XooDBFrontMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtilities.updateComponentTreeUI(this);
        initComponents();
        setLocationRelativeTo(this);

        setIconImage(Toolkit.getDefaultToolkit().createImage(
                getClass().getResource("/icon/XooDB-icon-image.png")));
        
        connectionManager = new ConnectionManager();
        utility = new Utility();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        sqlEditorPopupMenu = new javax.swing.JPopupMenu();
        clearEditorMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        cutEditorPopMenuItem = new javax.swing.JMenuItem();
        copyEditorPopMenuItem = new javax.swing.JMenuItem();
        pasteEditorPopMenuItem = new javax.swing.JMenuItem();
        databaseTreePopupMenu = new javax.swing.JPopupMenu();
        refreshMenuItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        newDatabasePopMenuItem = new javax.swing.JMenuItem();
        newTablePopMenuItem = new javax.swing.JMenuItem();
        addRowPopMenuItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        removePopMenuItem = new javax.swing.JMenuItem();
        jButton1 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        connectButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        addNewRowButton = new javax.swing.JButton();
        removeRowButton = new javax.swing.JButton();
        commitButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        executeQueryButton = new javax.swing.JButton();
        executeSelectedQueryButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        databaseTree = new javax.swing.JTree();
        databaseTabbedPane = new javax.swing.JTabbedPane();
        fieldSummaryPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fieldSummaryTable = new javax.swing.JTable();
        tableDataPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        sqlEditorPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        sqlEditorTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        sqlEditorResultDisplayTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        connectMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        databaseMenu = new javax.swing.JMenu();
        executeQueryMenuItem = new javax.swing.JMenuItem();
        executeSelectedQueryMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        databaseSubMenu = new javax.swing.JMenu();
        newDatabaseMenuItem = new javax.swing.JMenuItem();
        removeDatabaseMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        migrateDatabaseMenuItem = new javax.swing.JMenuItem();
        tableSubMenu = new javax.swing.JMenu();
        newTableMenuItem = new javax.swing.JMenuItem();
        removeTableMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        addNewRowMenuItem = new javax.swing.JMenuItem();
        removeRowMenuItem = new javax.swing.JMenuItem();
        commitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        contactMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        clearEditorMenuItem.setText("Clear");
        clearEditorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEditorMenuItemActionPerformed(evt);
            }
        });
        sqlEditorPopupMenu.add(clearEditorMenuItem);
        sqlEditorPopupMenu.add(jSeparator7);

        cutEditorPopMenuItem.setText("Cut");
        cutEditorPopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutEditorPopMenuItemActionPerformed(evt);
            }
        });
        sqlEditorPopupMenu.add(cutEditorPopMenuItem);

        copyEditorPopMenuItem.setText("Copy");
        copyEditorPopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyEditorPopMenuItemActionPerformed(evt);
            }
        });
        sqlEditorPopupMenu.add(copyEditorPopMenuItem);

        pasteEditorPopMenuItem.setText("Paste");
        pasteEditorPopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteEditorPopMenuItemActionPerformed(evt);
            }
        });
        sqlEditorPopupMenu.add(pasteEditorPopMenuItem);

        refreshMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/refreshIcon.png"))); // NOI18N
        refreshMenuItem.setText("Refresh");
        refreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMenuItemActionPerformed(evt);
            }
        });
        databaseTreePopupMenu.add(refreshMenuItem);
        databaseTreePopupMenu.add(jSeparator8);

        newDatabasePopMenuItem.setText("New Database");
        newDatabasePopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDatabasePopMenuItemActionPerformed(evt);
            }
        });
        databaseTreePopupMenu.add(newDatabasePopMenuItem);

        newTablePopMenuItem.setText("New Table");
        newTablePopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTablePopMenuItemActionPerformed(evt);
            }
        });
        databaseTreePopupMenu.add(newTablePopMenuItem);

        addRowPopMenuItem.setText("Add a Row");
        addRowPopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowPopMenuItemActionPerformed(evt);
            }
        });
        databaseTreePopupMenu.add(addRowPopMenuItem);
        databaseTreePopupMenu.add(jSeparator9);

        removePopMenuItem.setText("Remove");
        removePopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePopMenuItemActionPerformed(evt);
            }
        });
        databaseTreePopupMenu.add(removePopMenuItem);

        jButton1.setText("jButton1");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XooDB Front");
        setIconImages(null);
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        connectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/connect.png"))); // NOI18N
        connectButton.setToolTipText("Connect to the XooDB server");
        connectButton.setFocusable(false);
        connectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(connectButton);
        jToolBar1.add(jSeparator5);

        addNewRowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/addRow.png"))); // NOI18N
        addNewRowButton.setToolTipText("Add a new row");
        addNewRowButton.setEnabled(false);
        addNewRowButton.setFocusable(false);
        addNewRowButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addNewRowButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addNewRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewRowButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addNewRowButton);

        removeRowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/removeRow.png"))); // NOI18N
        removeRowButton.setToolTipText("Remove a row");
        removeRowButton.setEnabled(false);
        removeRowButton.setFocusable(false);
        removeRowButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeRowButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removeRowButton);

        commitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/saveRow.png"))); // NOI18N
        commitButton.setToolTipText("Commit");
        commitButton.setEnabled(false);
        commitButton.setFocusable(false);
        commitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        commitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        commitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(commitButton);
        jToolBar1.add(jSeparator6);

        executeQueryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/play.png"))); // NOI18N
        executeQueryButton.setToolTipText("Execute Query");
        executeQueryButton.setFocusable(false);
        executeQueryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        executeQueryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        executeQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeQueryButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(executeQueryButton);

        executeSelectedQueryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/playselected.png"))); // NOI18N
        executeSelectedQueryButton.setToolTipText("Execute Selected Query");
        executeSelectedQueryButton.setFocusable(false);
        executeSelectedQueryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        executeSelectedQueryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        executeSelectedQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeSelectedQueryButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(executeSelectedQueryButton);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        databaseTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        databaseTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                databaseTreeMouseClicked(evt);
            }
        });
        databaseTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                databaseTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(databaseTree);

        fieldSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Column Name", "Type", "Size", "Null", "Primary Key"
            }
        ));
        fieldSummaryTable.setShowHorizontalLines(false);
        fieldSummaryTable.setShowVerticalLines(false);
        jScrollPane3.setViewportView(fieldSummaryTable);

        javax.swing.GroupLayout fieldSummaryPanelLayout = new javax.swing.GroupLayout(fieldSummaryPanel);
        fieldSummaryPanel.setLayout(fieldSummaryPanelLayout);
        fieldSummaryPanelLayout.setHorizontalGroup(
            fieldSummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
        );
        fieldSummaryPanelLayout.setVerticalGroup(
            fieldSummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );

        databaseTabbedPane.addTab("Field Summary", fieldSummaryPanel);

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(dataTable);

        javax.swing.GroupLayout tableDataPanelLayout = new javax.swing.GroupLayout(tableDataPanel);
        tableDataPanel.setLayout(tableDataPanelLayout);
        tableDataPanelLayout.setHorizontalGroup(
            tableDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
        );
        tableDataPanelLayout.setVerticalGroup(
            tableDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );

        databaseTabbedPane.addTab("Table Data", tableDataPanel);

        sqlEditorTextArea.setColumns(20);
        sqlEditorTextArea.setRows(5);
        sqlEditorTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sqlEditorTextAreaMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(sqlEditorTextArea);

        javax.swing.GroupLayout sqlEditorPanelLayout = new javax.swing.GroupLayout(sqlEditorPanel);
        sqlEditorPanel.setLayout(sqlEditorPanelLayout);
        sqlEditorPanelLayout.setHorizontalGroup(
            sqlEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
        );
        sqlEditorPanelLayout.setVerticalGroup(
            sqlEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );

        databaseTabbedPane.addTab("SQL Editor", sqlEditorPanel);

        sqlEditorResultDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(sqlEditorResultDisplayTable);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");

        connectMenuItem.setText("Connect");
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(connectMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setMnemonic('E');
        editMenu.setText("Edit");

        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        jMenuBar1.add(editMenu);

        databaseMenu.setMnemonic('D');
        databaseMenu.setText("Database");

        executeQueryMenuItem.setText("Execute Query");
        executeQueryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeQueryMenuItemActionPerformed(evt);
            }
        });
        databaseMenu.add(executeQueryMenuItem);

        executeSelectedQueryMenuItem.setText("Execute Selected Query");
        executeSelectedQueryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeSelectedQueryMenuItemActionPerformed(evt);
            }
        });
        databaseMenu.add(executeSelectedQueryMenuItem);
        databaseMenu.add(jSeparator2);

        databaseSubMenu.setText("Database");

        newDatabaseMenuItem.setText("New Database");
        newDatabaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDatabaseMenuItemActionPerformed(evt);
            }
        });
        databaseSubMenu.add(newDatabaseMenuItem);

        removeDatabaseMenuItem.setText("Remove Database");
        removeDatabaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDatabaseMenuItemActionPerformed(evt);
            }
        });
        databaseSubMenu.add(removeDatabaseMenuItem);
        databaseSubMenu.add(jSeparator3);

        migrateDatabaseMenuItem.setText("Migrate Database");
        migrateDatabaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                migrateDatabaseMenuItemActionPerformed(evt);
            }
        });
        databaseSubMenu.add(migrateDatabaseMenuItem);

        databaseMenu.add(databaseSubMenu);

        tableSubMenu.setText("Table");

        newTableMenuItem.setText("New Table");
        newTableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTableMenuItemActionPerformed(evt);
            }
        });
        tableSubMenu.add(newTableMenuItem);

        removeTableMenuItem.setText("Remove Table");
        removeTableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTableMenuItemActionPerformed(evt);
            }
        });
        tableSubMenu.add(removeTableMenuItem);
        tableSubMenu.add(jSeparator4);

        addNewRowMenuItem.setText("Add New Row");
        addNewRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewRowMenuItemActionPerformed(evt);
            }
        });
        tableSubMenu.add(addNewRowMenuItem);

        removeRowMenuItem.setText("Remove Row");
        removeRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowMenuItemActionPerformed(evt);
            }
        });
        tableSubMenu.add(removeRowMenuItem);

        commitMenuItem.setText("Commit");
        commitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitMenuItemActionPerformed(evt);
            }
        });
        tableSubMenu.add(commitMenuItem);

        databaseMenu.add(tableSubMenu);

        jMenuBar1.add(databaseMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);
        helpMenu.add(jSeparator10);

        contactMenuItem.setText("Contact...");
        contactMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contactMenuItem);

        aboutMenuItem.setText("About...");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 954, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)
                    .addComponent(databaseTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(databaseTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void addNewRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewRowButtonActionPerformed
        addRow();
    }//GEN-LAST:event_addNewRowButtonActionPerformed
    
    /**
     * connect to the XooDB server when the button is pressed
     * 
     * @param evt
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        connectToServer();
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * connect to the XooDB server when connect option in menu is selected
     * 
     * @param evt
     */
    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed
        connectToServer();
    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void connectToServer() {
        ConnectJDialog connectJDialog = new ConnectJDialog(this, true);
        connectJDialog.setLocationRelativeTo(this);
        connectJDialog.setVisible(true);
    }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        sqlEditorTextArea.cut();
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        sqlEditorTextArea.copy();
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        sqlEditorTextArea.paste();
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void executeQueryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryMenuItemActionPerformed
        executeQuery();
    }//GEN-LAST:event_executeQueryMenuItemActionPerformed

    private void executeQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryButtonActionPerformed
        executeQuery();
    }//GEN-LAST:event_executeQueryButtonActionPerformed

    private void executeQuery() {
        /**
         * get the text from the sqlEditorTextArea
         */
        String queryStr = sqlEditorTextArea.getText();
        if (!queryStr.equals("")) {
            QueryBean query = new QueryBean();
            if(selectedDatabase == null || selectedDatabase.equals("")) {
                JOptionPane.showMessageDialog(this, 
                        "Select a database for performing the action",
                        "Execute Query", JOptionPane.WARNING_MESSAGE);
            } else {
                query.setDatabaseName(selectedDatabase);

                if(queryStr.indexOf(";") != -1) {
                    queryStr = queryStr.substring(0, queryStr.lastIndexOf(";"));
                }

                if(queryStr.indexOf("\n") != -1) {
                    queryStr.replaceAll("\n", " ");
                }

                queryStr = queryStr.trim();

                if (queryStr.toLowerCase().startsWith("select")) {
                    query.setQueryType("SELECT");
                } else {
                    query.setQueryType("");
                }
                query.setQuery(queryStr);
                connectionManager.setResponseListener(this);
                connectionManager.writeToServer(query);
                sqlEditor = true;
            }
        }

        clearSQLEditorResultTable();
    }

    private void executeSelectedQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeSelectedQueryButtonActionPerformed
        executeSelectedQuery();
    }//GEN-LAST:event_executeSelectedQueryButtonActionPerformed

    private void executeSelectedQueryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeSelectedQueryMenuItemActionPerformed
        executeSelectedQuery();
    }//GEN-LAST:event_executeSelectedQueryMenuItemActionPerformed

    private void executeSelectedQuery() {
        /**
         * get the selected text from the sqlEditorTextArea
         */
        String queryStr = sqlEditorTextArea.getSelectedText();
        if (queryStr != null && !queryStr.equals("")) {
            QueryBean query = new QueryBean();

            if(selectedDatabase == null || selectedDatabase.equals("")) {
                JOptionPane.showMessageDialog(this,
                        "Select a database for performing the action",
                        "Execute Selected Query", JOptionPane.WARNING_MESSAGE);
            } else {
                query.setDatabaseName(selectedDatabase);

                if(queryStr.indexOf(";") != -1) {
                    queryStr = queryStr.substring(0, queryStr.lastIndexOf(";"));
                }

                if(queryStr.indexOf("\n") != -1) {
                    queryStr.replaceAll("\n", " ");
                }

                queryStr = queryStr.trim();

                if (queryStr.toLowerCase().startsWith("select")) {
                    query.setQueryType("SELECT");
                } else {
                    query.setQueryType("");
                }

                query.setQuery(queryStr);
                connectionManager.setResponseListener(this);
                connectionManager.writeToServer(query);
                sqlEditor = true;
            }
            
        }

        clearSQLEditorResultTable();
    }

    /**
     * adding a new database
     *
     * @param evt
     */
    private void newDatabaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDatabaseMenuItemActionPerformed
        addNewDatabase();
    }//GEN-LAST:event_newDatabaseMenuItemActionPerformed

    private void addNewDatabase() {
        /**
         * get the databaseName as user input
         */
        String databaseName = JOptionPane.showInputDialog(this, "Database Name:",
                "Create Database", JOptionPane.QUESTION_MESSAGE);
        /**
         * check the entered name
         * -null
         * -empty
         */
        if (databaseName != null && !databaseName.equals("")) {
            /**
             * register response listener
             *
             * send the "CREATE DATABASE databaseName" command to XooDB server
             */
            connectionManager.setResponseListener(this);
            connectionManager.writeToServer("CREATE DATABASE " + databaseName);
        }
    }

    /**
     * 
     * @param evt
     */
    private void removeDatabaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDatabaseMenuItemActionPerformed
        /**
         * get the selected node from the tree
         */
        DefaultMutableTreeNode selectedNode =
                (DefaultMutableTreeNode) databaseTree.getLastSelectedPathComponent();

        if (selectedNode != null) {
            /**
             * get the object corresponding to the selected node
             */
            Object usrObj = selectedNode.getUserObject();
            if (usrObj instanceof DatabaseBean) {
                /**
                 * if the object is an instance of DatabaseBean
                 * -confirm the selection
                 * -create QueryBean - DROP DATABASE databaseName
                 * -send to the XooDB server
                 */
                if ((JOptionPane.showConfirmDialog(this,
                        "Do you want to remove database: " + selectedDatabase + " ?",
                        "Remove Database", JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION) {
                    QueryBean query = new QueryBean();
                    query.setDatabaseName(selectedDatabase);
                    query.setQuery("DROP DATABASE " + selectedDatabase);
                    query.setQueryType("");
                    connectionManager.setResponseListener(this);
                    connectionManager.writeToServer(query);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Please select a database to be removed",
                        "Remove Database",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_removeDatabaseMenuItemActionPerformed

    /**
     * adding a new table
     *
     * @param evt
     */
    private void newTableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTableMenuItemActionPerformed
        addNewTable();
    }//GEN-LAST:event_newTableMenuItemActionPerformed

    private void addNewTable() {
        /**
         * if a database is already selected
         *
         * display CreateTableDialog
         */
        if (selectedDatabase != null) {
            CreateTableJDialog createTableJDialog = new CreateTableJDialog(this, true);
            createTableJDialog.setLocationRelativeTo(this);
            createTableJDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please select a database first for creating a table",
                    "Create Table", JOptionPane.WARNING_MESSAGE);
        }
    }
    /**
     * removing a table
     * 
     * @param evt
     */
    private void removeTableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTableMenuItemActionPerformed
        /**
         * get the selected node from the tree
         */
        DefaultMutableTreeNode selectedNode =
                (DefaultMutableTreeNode) databaseTree.getLastSelectedPathComponent();

        if (selectedNode != null) {
            /**
             * get the object corresponding to the selected node
             */
            Object usrObj = selectedNode.getUserObject();
            if (usrObj instanceof TableBean) {
                /**
                 * if the object is an instance of TableBean
                 * -confirm selection
                 * -create QueryBean - DROP TABLE tableName
                 * -send to XooDB server
                 */
                if ((JOptionPane.showConfirmDialog(this,
                        "Do you want remove table: " + selectedTable + " ?",
                        "Remove Table", JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION) {
                    QueryBean query = new QueryBean();
                    query.setDatabaseName(selectedDatabase);
                    query.setQuery("DROP TABLE " + selectedTable);
                    query.setQueryType("");
                    connectionManager.setResponseListener(this);
                    connectionManager.writeToServer(query);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Please select a table to be removed",
                        "Remove Database",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_removeTableMenuItemActionPerformed

    /**
     * 
     * @param evt
     */
    private void migrateDatabaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_migrateDatabaseMenuItemActionPerformed
        /**
         * database migration
         */
        MigrateDatabaseJDialog migrateDatabaseJDialog = new MigrateDatabaseJDialog(this, true);
        migrateDatabaseJDialog.setLocationRelativeTo(this);
        migrateDatabaseJDialog.setVisible(true);
    }//GEN-LAST:event_migrateDatabaseMenuItemActionPerformed

    /**
     * add a new row to the table
     * 
     * @param evt
     */
    private void addNewRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewRowMenuItemActionPerformed
        addRow();
    }//GEN-LAST:event_addNewRowMenuItemActionPerformed

    private void addRow() {
        /**
         * if the component selected in the tabbed pane is tableContentPanel
         */
        if (databaseTabbedPane.getSelectedComponent() == tableDataPanel) {
            /**
             * get the table model of the contentTable
             *
             * add a new row using the method addRow()
             */
            DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
            /**
             * in addRow() allocate space by passing an array of Object of size
             * equal to the no of columns in the data table
             */
            tableModel.addRow(new Object[tableModel.getColumnCount()]);
            waitingForSave = true;
        }
        changeStateOfAddRow();
    }

    /**
     * remove a row from the table
     *
     * @param evt
     */
    private void removeRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowMenuItemActionPerformed
        removeRow();
    }//GEN-LAST:event_removeRowMenuItemActionPerformed

    private void removeRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowButtonActionPerformed
        removeRow();
    }//GEN-LAST:event_removeRowButtonActionPerformed

    private void removeRow() {
        if (databaseTabbedPane.getSelectedComponent() == tableDataPanel) {
            int selectedRow = dataTable.getSelectedRow();
            if (selectedRow != -1) {
                QueryBean query = new QueryBean();
                query.setDatabaseName(selectedDatabase);
                /**
                 * queryType is used by the class HandleClientRequest in the XooDB
                 * server
                 */
                query.setQueryType("DELETE ROW");
                query.setTableName(selectedTable);
                query.setSelectedRow(selectedRow);
                connectionManager.setResponseListener(this);
                connectionManager.writeToServer(query);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Please select a row to be removed",
                        "Remove Row",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private void commitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitButtonActionPerformed
        commitTable();
    }//GEN-LAST:event_commitButtonActionPerformed

    private void commitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitMenuItemActionPerformed
        commitTable();
    }//GEN-LAST:event_commitMenuItemActionPerformed

    /**
     * handles the selection event of databaseTree
     * 
     * @param evt
     */
    private void databaseTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_databaseTreeValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)
                databaseTree.getLastSelectedPathComponent();
        /**
         * each node in the tree contains a user object.
         * using the method getUserObject() we get the object from the
         * selectedNode
         *
         * check the type of user object
         * if its DatabaseBean
         * -it represents a database and get the databaseName
         * if its TableBean
         * -it represents a table and get the tableName
         * -get the database in which the table is contained
         *      (database is the parent node of the table)
         */
        if (selectedNode != null) {
            Object userObj = selectedNode.getUserObject();
            if (userObj instanceof DatabaseBean) {
                selectedDatabase = ((DatabaseBean) userObj).getDatabaseName();
            } else if (userObj instanceof TableBean) {
                TableBean tableBean = (TableBean) userObj;
                loadFieldDetails(tableBean.getColumns());
                loadTableData(tableBean.getColumns());
                selectedTable = tableBean.getTableName();
                selectedDatabase =
                        ((DatabaseBean) ((DefaultMutableTreeNode) selectedNode.getParent()).getUserObject()).getDatabaseName();
                QueryBean query = new QueryBean();
                query.setDatabaseName(selectedDatabase);
                query.setQuery("SELECT * FROM " + selectedTable);
                query.setQueryType("SELECT");
                connectionManager.setResponseListener(this);
                connectionManager.writeToServer(query);
            } else {
                selectedDatabase = null;
            }
        } else {
            selectedDatabase = null;
        }
        changeStateOfAddRow();
    }//GEN-LAST:event_databaseTreeValueChanged

    private void sqlEditorTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sqlEditorTextAreaMouseClicked
        /**
         * handles the right click on the sqlEditorTextArea
         */
        if (evt.getButton() == MouseEvent.BUTTON3) {
            /**
             * parent
             * x axis
             * y axis
             */
            sqlEditorPopupMenu.show(sqlEditorTextArea, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_sqlEditorTextAreaMouseClicked

    private void clearEditorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEditorMenuItemActionPerformed
        sqlEditorTextArea.setText("");
    }//GEN-LAST:event_clearEditorMenuItemActionPerformed

    private void cutEditorPopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutEditorPopMenuItemActionPerformed
        sqlEditorTextArea.cut();
    }//GEN-LAST:event_cutEditorPopMenuItemActionPerformed

    private void copyEditorPopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyEditorPopMenuItemActionPerformed
        sqlEditorTextArea.copy();
    }//GEN-LAST:event_copyEditorPopMenuItemActionPerformed

    private void pasteEditorPopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteEditorPopMenuItemActionPerformed
        sqlEditorTextArea.paste();
    }//GEN-LAST:event_pasteEditorPopMenuItemActionPerformed

    private void databaseTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_databaseTreeMouseClicked
        /**
         * BUTTON3 -> right click
         */
        if (evt.getButton() == MouseEvent.BUTTON3) {
            /**
             * parent component
             * x axis
             * y axis
             */
            databaseTreePopupMenu.show(databaseTree, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_databaseTreeMouseClicked

    private void refreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMenuItemActionPerformed
        QueryBean queryBean = new QueryBean();        
        queryBean.setQueryType("SHOW DATABASES");
        connectionManager.setResponseListener(this);
        connectionManager.writeToServer(queryBean);
    }//GEN-LAST:event_refreshMenuItemActionPerformed

    private void newDatabasePopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDatabasePopMenuItemActionPerformed
        addNewDatabase();
    }//GEN-LAST:event_newDatabasePopMenuItemActionPerformed

    private void newTablePopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTablePopMenuItemActionPerformed
        addNewTable();
    }//GEN-LAST:event_newTablePopMenuItemActionPerformed

    private void removePopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePopMenuItemActionPerformed
        /**
         * get the selected node from the tree
         */
        DefaultMutableTreeNode selectedNode =
                (DefaultMutableTreeNode) databaseTree.getLastSelectedPathComponent();

        if (selectedNode != null) {
            /**
             * get the object corresponding to the selected node
             */
            Object usrObj = selectedNode.getUserObject();
            if (usrObj instanceof DatabaseBean) {
                /**
                 * if the object is an instance of DatabaseBean
                 * -confirm the selection
                 * -create QueryBean - DROP DATABASE databaseName
                 * -send to the XooDB server
                 */
                if ((JOptionPane.showConfirmDialog(this,
                        "Do you want to remove database: " + selectedDatabase + " ?",
                        "Remove Database", JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION) {
                    QueryBean query = new QueryBean();
                    query.setDatabaseName(selectedDatabase);
                    query.setQuery("DROP DATABASE " + selectedDatabase);
                    query.setQueryType("");
                    connectionManager.setResponseListener(this);
                    connectionManager.writeToServer(query);
                }
            } else if (usrObj instanceof TableBean) {
                /**
                 * if the object is an instance of TableBean
                 * -confirm selection
                 * -create QueryBean - DROP TABLE tableName
                 * -send to XooDB server
                 */
                if ((JOptionPane.showConfirmDialog(this,
                        "Do you want remove table: " + selectedTable + " ?",
                        "Remove Table", JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION) {
                    QueryBean query = new QueryBean();
                    query.setDatabaseName(selectedDatabase);
                    query.setQuery("DROP TABLE " + selectedTable);
                    query.setQueryType("");
                    connectionManager.setResponseListener(this);
                    connectionManager.writeToServer(query);
                }
            }
        }
    }//GEN-LAST:event_removePopMenuItemActionPerformed

    private void addRowPopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowPopMenuItemActionPerformed
        addRow();
    }//GEN-LAST:event_addRowPopMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void contactMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactMenuItemActionPerformed
        ContactFrame contactFrame = new ContactFrame();
        contactFrame.setVisible(true);
        contactFrame.setLocationRelativeTo(this);
    }//GEN-LAST:event_contactMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutFrame aboutFrame = new AboutFrame();
        aboutFrame.setVisible(true);
        aboutFrame.setLocationRelativeTo(this);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        connectionManager.closeSocket();
    }//GEN-LAST:event_formWindowClosed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        HelpFrame helpFrame = new HelpFrame();
        helpFrame.setVisible(true);
        helpFrame.setLocationRelativeTo(this);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    /**
     * to commit the table content
     */
    private void commitTable() {
        if (dataTable.getRowCount() != 0) {
            DefaultTableModel tableModel = (DefaultTableModel) dataTable.getModel();
            Vector rowData = (Vector) tableModel.getDataVector().get(
                    dataTable.getRowCount() - 1);
            /**
             * INSERT statement corresponding to the row added is created
             * using
             * createInsertTableStatement(Vector rowData, String tableName)
             * in Utility.java
             */
            String stmnt = utility.createInsertTableStatement(rowData, selectedTable);
            //System.out.println("query: " + stmnt);
            if (stmnt != null && selectedDatabase != null) {
                //System.out.println("entered query");
                /**
                 * construct the query in QueryBean
                 */
                QueryBean query = new QueryBean();
                query.setQuery(stmnt);
                query.setDatabaseName(selectedDatabase);
                query.setQueryType("");
                query.setTableName(selectedTable);
                /**
                 * send the QueryBean to the server
                 */
                connectionManager.setResponseListener(this);
                connectionManager.writeToServer(query);
            } else {
                JOptionPane.showMessageDialog(this, "Please select Database.",
                        "Insert Row", JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new XooDBFrontMainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addNewRowButton;
    private javax.swing.JMenuItem addNewRowMenuItem;
    private javax.swing.JMenuItem addRowPopMenuItem;
    private javax.swing.JMenuItem clearEditorMenuItem;
    private javax.swing.JButton commitButton;
    private javax.swing.JMenuItem commitMenuItem;
    private javax.swing.JButton connectButton;
    private javax.swing.JMenuItem connectMenuItem;
    private javax.swing.JMenuItem contactMenuItem;
    private javax.swing.JMenuItem copyEditorPopMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutEditorPopMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JTable dataTable;
    private javax.swing.JMenu databaseMenu;
    private javax.swing.JMenu databaseSubMenu;
    private javax.swing.JTabbedPane databaseTabbedPane;
    private javax.swing.JTree databaseTree;
    private javax.swing.JPopupMenu databaseTreePopupMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton executeQueryButton;
    private javax.swing.JMenuItem executeQueryMenuItem;
    private javax.swing.JButton executeSelectedQueryButton;
    private javax.swing.JMenuItem executeSelectedQueryMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JPanel fieldSummaryPanel;
    private javax.swing.JTable fieldSummaryTable;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JToolBar jToolBar1;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JMenuItem migrateDatabaseMenuItem;
    private javax.swing.JMenuItem newDatabaseMenuItem;
    private javax.swing.JMenuItem newDatabasePopMenuItem;
    private javax.swing.JMenuItem newTableMenuItem;
    private javax.swing.JMenuItem newTablePopMenuItem;
    private javax.swing.JMenuItem pasteEditorPopMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JMenuItem removeDatabaseMenuItem;
    private javax.swing.JMenuItem removePopMenuItem;
    private javax.swing.JButton removeRowButton;
    private javax.swing.JMenuItem removeRowMenuItem;
    private javax.swing.JMenuItem removeTableMenuItem;
    private javax.swing.JPanel sqlEditorPanel;
    private javax.swing.JPopupMenu sqlEditorPopupMenu;
    private javax.swing.JTable sqlEditorResultDisplayTable;
    private javax.swing.JTextArea sqlEditorTextArea;
    private javax.swing.JPanel tableDataPanel;
    private javax.swing.JMenu tableSubMenu;
    // End of variables declaration//GEN-END:variables

    public void response(Object response) {
        if (response instanceof String) {
            JOptionPane.showMessageDialog(this, response, "XooDB Server Reply", JOptionPane.WARNING_MESSAGE);
        } else if (response instanceof ResultBean) {
            ResultBean resultBean = (ResultBean) response;
            if (sqlEditor) {
                if (resultBean.getType().equals("TABLE")) {
                    viewSQLEditor(resultBean.getTableData(), resultBean.getTableColumnNames());
                } else {
                    ArrayList data = ((ResultBean) response).getData();
                    reloadDatabaseTree(data);
                }
            } else if (resultBean.getType().equals("TABLE")) {                
                loadTableData(resultBean.getTableData(), resultBean.getTableColumnNames());
            } else {
                ArrayList data = ((ResultBean) response).getData();
                reloadDatabaseTree(data);
                waitingForSave = false;
                commitButton.setEnabled(false);
            }
        }
        sqlEditor = false;
    }

    private void viewSQLEditor(String[][] tableData, String[] tableColumnNames) {
        DefaultTableModel tableModel = new DefaultTableModel(tableData, tableColumnNames);
        sqlEditorResultDisplayTable.setModel(tableModel);
    }

    /**
     * 
     * @param databases
     */
    public void reloadDatabaseTree(ArrayList databases) {
        /**
         * root of the tree is userName
         */
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(userName);
        /**
         * traverse each database owned by the user with userName
         * -add columns to each table in the database
         * -add tables to each database
         * -add the databases to the root i.e the userName
         */
        for (int i = 0; i < databases.size(); i++) {
            DatabaseBean databaseBean = (DatabaseBean) databases.get(i);
            DefaultMutableTreeNode databaseNode = new DefaultMutableTreeNode(databaseBean);
            ArrayList tables = databaseBean.getTables();
            for (int j = 0; j < tables.size(); j++) {
                TableBean tableBean = (TableBean) tables.get(j);
                DefaultMutableTreeNode tableNode = new DefaultMutableTreeNode(tableBean);
                for (TableColumnBean columnBean : tableBean.getColumns()) {
                    /**
                     * from the TableColumnBean retrieve the columnName
                     * create a node for that
                     * add the columnNode to the tableNode
                     */
                    DefaultMutableTreeNode columnNode = new DefaultMutableTreeNode(columnBean.getColumnName());
                    tableNode.add(columnNode);
                }
                databaseNode.add(tableNode);
            }
            rootNode.add(databaseNode);
        }
        databaseTree.setModel(new DefaultTreeModel(rootNode));
        databaseTree.setCellRenderer(new DatabaseTreeRenderer());

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                /**
                 * update the user interface
                 */
                databaseTree.updateUI();
            }
        });
    }

    /**
     * 
     */
    private void changeStateOfAddRow() {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)
                databaseTree.getLastSelectedPathComponent();
        if (waitingForSave) {
            /**
             * if a addRow command is pending (to be saved)
             * the addNewRowButton is disabled
             */
            addNewRowButton.setEnabled(false);
            commitButton.setEnabled(true);
        } else if (selectedNode != null) {
            Object userObj = selectedNode.getUserObject();
            /**
             * if dataTable is selected
             * and object in the selected node in the tree is a TableBean
             * and not waiting for save operation
             * -enable addNewRowButton
             * -disable commitButton
             */
            if (databaseTabbedPane.getSelectedComponent() == tableDataPanel
                    && userObj instanceof TableBean && !waitingForSave) {
                addNewRowButton.setEnabled(true);
                commitButton.setEnabled(false);
            } else {
                addNewRowButton.setEnabled(false);
            }
        } else {
            addNewRowButton.setEnabled(false);
        }
    }

    /**
     * loading the dataTable - table header only
     *
     * @param columnBeans
     */
    private void loadTableData(TableColumnBean[] columnBeans) {
        TableDataTableModel tableModel = new TableDataTableModel(
                utility.getColumnNames(columnBeans));
        tableModel.addTableModelListener(this);
        dataTable.setModel(tableModel);
        dataTable.getSelectionModel().addListSelectionListener(this);
        changeStateOfAddRow();
    }

    /**
     * loading the dataTable - table header and data
     *
     * @param tableData
     * @param columnNames
     */
    private void loadTableData(String[][] tableData, String[] columnNames) {
        TableDataTableModel tableModel = new TableDataTableModel(tableData, columnNames);
        tableModel.addTableModelListener(this);
        dataTable.setModel(tableModel);
        dataTable.getSelectionModel().addListSelectionListener(this);
        changeStateOfAddRow();
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                dataTable.updateUI();
            }
        });
    }

    /**
     * load the field details when a tableNode is selected
     *
     * @param columns
     */
    private void loadFieldDetails(TableColumnBean[] columns) {
        DefaultTableModel tableModel = (DefaultTableModel) fieldSummaryTable.getModel();
        tableModel.getDataVector().removeAllElements();        
        for (int i = 0; i < columns.length; i++) {            
            TableColumnBean tableColumnBean = columns[i];
            tableModel.addRow(new Object[]{tableColumnBean.getColumnName(),
                        tableColumnBean.getDataType(), tableColumnBean.getSize(),
                        tableColumnBean.isNullAllowed(), tableColumnBean.isPrivateKey()});
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                fieldSummaryTable.updateUI();
            }
        });
    }

    /**
     * if table is changed
     *
     * @param e
     */
    public void tableChanged(TableModelEvent e) {
        if (e.getType() == TableModelEvent.UPDATE && !waitingForSave) {
            System.out.println(e.getLastRow() + " : " + e.getColumn() + "Updated");
            /**
             * get the value at the changed cell
             */
            String newData = (String) dataTable.getValueAt(e.getLastRow(), e.getColumn());
            /**
             * get the columnName of the changed column
             */
            String fieldName = dataTable.getColumnName(e.getColumn());
            /**
             * construct the query in a QueryBean
             */
            QueryBean query = new QueryBean();
            query.setDatabaseName(selectedDatabase);
            query.setTableName(selectedTable);
            query.setQueryType("UPDATE CELL");
            query.setSelectedRow(e.getFirstRow());
            query.setSelectedColumn(e.getColumn());
            query.setFieldName(fieldName);
            query.setCellData(newData);
            /**
             * send the query in the form of QueryBean to the XooDB server
             */
            connectionManager.setResponseListener(this);
            connectionManager.writeToServer(query);
        }
    }

    /**
     * 
     * @param e
     */
    public void valueChanged(ListSelectionEvent e) {
        int selectedIndex = dataTable.getSelectedRow();
        if (selectedIndex != -1 && !waitingForSave) {
            removeRowButton.setEnabled(true);
        } else {
            removeRowButton.setEnabled(false);
        }
    }

    /**
     * to clear SQL Editor result table
     */
    private void clearSQLEditorResultTable() {
        DefaultTableModel tableModel = new DefaultTableModel();
        sqlEditorResultDisplayTable.setModel(tableModel);
    }
}
